datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    String  @id @map("user_id")
  email     String  @unique @map("email")
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  fullName  String  @map("full_name")
  iconUri   String? @default("https://ps.w.org/user-avatar-reloaded/assets/icon-256x256.png?rev=2540745") @map("icon_uri")

  people                  Person[]
  peopleContacts          PersonContact[]
  teamMembers             TeamMember[]
  skills                  PersonSkill[]
  roles                   PersonRole[]
  createdDocumentation    Documentation[]
  onboardingGuideProgress OnboardingGuideProgress[]
  workItems               WorkItem[]
  workItemAssignees       WorkItemAssigne[]
  workAreaPeople          WorkAreaPerson[]

  @@map("user")
}

model Domain {
  domainId String @id @map("domain_id")
  name     String @map("name")

  subdomains              Subdomain[]
  skills                  Skill[]
  roles                   Role[]
  labels                  Label[]
  people                  Person[]
  peopleContacts          PersonContact[]
  peopleSkills            PersonSkill[]
  peopleRoles             PersonRole[]
  teams                   Team[]
  teamMembers             TeamMember[]
  teamContacts            TeamContact[]
  teamLinks               TeamLink[]
  teamLabels              TeamLabel[]
  components              Component[]
  comopnentContacts       ComponentContact[]
  componentLinks          ComponentLink[]
  componentLabels         ComponentLabel[]
  documentation           Documentation[]
  documentationDocuments  DocumentationDocument[]
  documentationFiles      DocumentationFile[]
  onboardingGuides        OnboardingGuide[]
  onboardingGuideSteps    OnboardingGuideStep[]
  onboardingGuideProgress OnboardingGuideProgress[]
  workAreas               WorkArea[]
  workAreaPeople          WorkAreaPerson[]
  workItemStatuses        WorkItemStatus[]
  workItems               WorkItem[]
  workItemAssignees       WorkItemAssigne[]
  workItemAttachments     WorkItemAttachment[]
  invites                 DomainInvite[]
  files                   File[]

  @@map("domain")
}

model Subdomain {
  subdomainId String @id @map("subdomain_id")
  domainId    String @map("domain_id")
  name        String @map("name")

  domain     Domain      @relation(fields: [domainId], references: [domainId])
  components Component[]

  @@map("subdomain")
}

model DomainInvite {
  email    String @id @map("email")
  domainId String @map("domain_id")

  domain Domain @relation(fields: [domainId], references: [domainId])

  @@map("domain_invite")
}

model Person {
  userId     String   @map("user_id")
  domainId   String   @map("domain_id")
  aboutMe    String   @default("") @map("about_me")
  dateJoined DateTime @default(now()) @map("date_joined")

  domain                  Domain                    @relation(fields: [domainId], references: [domainId])
  user                    User                      @relation(fields: [userId], references: [userId])
  contacts                PersonContact[]
  skills                  PersonSkill[]
  roles                   PersonRole[]
  teamMembers             TeamMember[]
  createdDocumentation    Documentation[]
  onboardingGuideProgress OnboardingGuideProgress[]
  workItems               WorkItem[]
  workItemAssignees       WorkItemAssigne[]
  workAreaPeople          WorkAreaPerson[]

  @@id([userId, domainId])
  @@index([domainId])
  @@map("person")
}

model PersonRole {
  userId    String  @map("user_id")
  roleId    String  @map("role_id")
  domainId  String  @map("domain_id")
  isPrimary Boolean @map("is_primary")

  domain Domain @relation(fields: [domainId], references: [domainId])
  user   User   @relation(fields: [userId], references: [userId])
  role   Role   @relation(fields: [roleId], references: [roleId])
  person Person @relation(fields: [userId, domainId], references: [userId, domainId])

  @@id([userId, roleId])
  @@index(domainId)
  @@index(roleId)
  @@index(userId)
  @@map("person_role")
}

model PersonSkill {
  userId   String @map("user_id")
  skillId  String @map("skill_id")
  domainId String @map("domain_id")

  domain Domain @relation(fields: [domainId], references: [domainId])
  user   User   @relation(fields: [userId], references: [userId])
  skill  Skill  @relation(fields: [skillId], references: [skillId])
  person Person @relation(fields: [userId, domainId], references: [userId, domainId])

  @@id([userId, skillId])
  @@index(domainId)
  @@index(skillId)
  @@index(userId)
  @@map("person_skill")
}

model PersonContact {
  contactId   String  @id @map("contact_id")
  userId      String  @map("user_id")
  domainId    String  @map("domain_id")
  type        String  @map("type")
  href        String? @map("href")
  description String  @map("description")

  domain Domain @relation(fields: [domainId], references: [domainId])
  person Person @relation(fields: [userId, domainId], references: [userId, domainId])
  user   User   @relation(fields: [userId], references: [userId])

  @@index([domainId])
  @@map("person_contact")
}

model Team {
  teamId      String   @id @map("team_id")
  domainId    String   @map("domain_id")
  name        String   @map("name")
  description String   @default("") @map("description")
  iconUri     String?  @default("https://ps.w.org/user-avatar-reloaded/assets/icon-256x256.png?rev=2540745") @map("icon_uri")
  dateFormed  DateTime @default(now()) @map("date_formed")

  domain        Domain          @relation(fields: [domainId], references: [domainId])
  members       TeamMember[]
  contacts      TeamContact[]
  links         TeamLink[]
  labels        TeamLabel[]
  components    Component[]
  documentation Documentation[]

  @@index([domainId])
  @@map("team")
}

model TeamMember {
  teamId   String @map("team_id")
  userId   String @map("user_id")
  domainId String @map("domain_id")

  team   Team   @relation(fields: [teamId], references: [teamId])
  user   User   @relation(fields: [userId], references: [userId])
  domain Domain @relation(fields: [domainId], references: [domainId])
  person Person @relation(fields: [userId, domainId], references: [userId, domainId])

  @@id([teamId, userId])
  @@index([domainId])
  @@index([userId])
  @@index([teamId])
  @@map("team_member")
}

model TeamContact {
  contactId   String  @id @map("contact_id")
  teamId      String  @map("team_id")
  domainId    String  @map("domain_id")
  type        String  @map("type")
  href        String? @map("href")
  description String  @map("description")

  domain Domain @relation(fields: [domainId], references: [domainId])
  team   Team   @relation(fields: [teamId], references: [teamId])

  @@index([domainId])
  @@index([teamId])
  @@map("team_contact")
}

model TeamLink {
  linkId      String @id @map("link_id")
  teamId      String @map("team_id")
  domainId    String @map("domain_id")
  href        String @map("href")
  description String @map("description")

  team   Team   @relation(fields: [teamId], references: [teamId])
  domain Domain @relation(fields: [domainId], references: [domainId])

  @@index([domainId])
  @@index([teamId])
  @@map("team_link")
}

model TeamLabel {
  labelId  String @map("link_id")
  teamId   String @map("team_id")
  domainId String @map("domain_id")

  domain Domain @relation(fields: [domainId], references: [domainId])
  team   Team   @relation(fields: [teamId], references: [teamId])
  label  Label  @relation(fields: [labelId], references: [labelId])

  @@id([labelId, teamId])
  @@index([labelId])
  @@index([teamId])
  @@index([domainId])
  @@map("team_label")
}

model Component {
  componentId String  @id @map("component_id")
  domainId    String  @map("domain_id")
  name        String  @map("name")
  description String  @default("") @map("description")
  type        String  @map("type")
  ownerTeamId String? @map("owner_team_id")
  subdomainId String? @map("subdomain_id")

  domain    Domain     @relation(fields: [domainId], references: [domainId])
  subdomain Subdomain? @relation(fields: [subdomainId], references: [subdomainId])
  ownerTeam Team?      @relation(fields: [ownerTeamId], references: [teamId])

  contacts      ComponentContact[]
  links         ComponentLink[]
  labels        ComponentLabel[]
  documentation Documentation[]

  @@index(domainId)
  @@map("component")
}

model ComponentContact {
  contactId   String  @id @map("contact_id")
  componentId String  @map("component_id")
  domainId    String  @map("domain_id")
  type        String  @map("type")
  href        String? @map("href")
  description String  @map("description")

  domain    Domain    @relation(fields: [domainId], references: [domainId])
  component Component @relation(fields: [componentId], references: [componentId])

  @@index([domainId])
  @@index([componentId])
  @@map("component_contact")
}

model ComponentLink {
  linkId      String @id @map("link_id")
  componentId String @map("component_id")
  domainId    String @map("domain_id")
  href        String @map("href")
  description String @map("description")

  domain    Domain    @relation(fields: [domainId], references: [domainId])
  component Component @relation(fields: [componentId], references: [componentId])

  @@index([domainId])
  @@index([componentId])
  @@map("component_link")
}

model ComponentLabel {
  labelId     String @map("link_id")
  componentId String @map("component_id")
  domainId    String @map("domain_id")

  domain    Domain    @relation(fields: [domainId], references: [domainId])
  component Component @relation(fields: [componentId], references: [componentId])
  label     Label     @relation(fields: [labelId], references: [labelId])

  @@id([labelId, componentId])
  @@index([labelId])
  @@index([componentId])
  @@index([domainId])
  @@map("component_label")
}

model Documentation {
  documentationId String   @id @map("documentation_id")
  domainId        String   @map("domain_id")
  componentId     String?  @map("component_id")
  teamId          String?  @map("team_id")
  type            String   @map("type")
  createdAt       DateTime @map("created_at")
  updatedAt       DateTime @map("updated_at")
  name            String?  @map("name")
  parentId        String?  @map("parent_id")
  createdByUserId String   @map("created_by_user_id")

  domain          Domain                  @relation(fields: [domainId], references: [domainId])
  component       Component?              @relation(fields: [componentId], references: [componentId])
  team            Team?                   @relation(fields: [teamId], references: [teamId])
  parent          Documentation?          @relation("children", fields: [parentId], references: [documentationId])
  children        Documentation[]         @relation("children")
  createdByUser   User                    @relation(fields: [createdByUserId], references: [userId])
  createdByPerson Person                  @relation(fields: [createdByUserId, domainId], references: [userId, domainId])
  documents       DocumentationDocument[]
  files           DocumentationFile[]

  @@map("documentation")
}

model DocumentationDocument {
  documentationId String @id @map("documentation_id")
  domainId        String @map("domain_id")
  data            Bytes? @map("data") @db.ByteA

  documentation Documentation @relation(fields: [documentationId], references: [documentationId])
  domain        Domain        @relation(fields: [domainId], references: [domainId])

  @@index(domainId)
  @@map("documentation_document")
}

model DocumentationFile {
  documentationId String  @id @map("documentation_id")
  domainId        String  @map("domain_id")
  domain          Domain  @relation(fields: [domainId], references: [domainId])
  fileId          String? @map("file_id")

  documentation Documentation @relation(fields: [documentationId], references: [documentationId])
  file          File?         @relation(fields: [fileId], references: [fileId])

  @@index(domainId)
  @@map("documentation_file")
}

model Role {
  roleId   String @id @map("role_id")
  domainId String @map("domain_id")
  name     String

  domain      Domain       @relation(fields: [domainId], references: [domainId])
  peopleRoles PersonRole[]

  @@unique([roleId, domainId])
  @@index([domainId])
  @@map("role")
}

model Skill {
  skillId  String @id @map("skill_id")
  domainId String @map("domain_id")
  name     String

  domain       Domain        @relation(fields: [domainId], references: [domainId])
  peopleSkills PersonSkill[]

  @@unique([skillId, domainId])
  @@index([domainId])
  @@map("skill")
}

model OnboardingGuide {
  guideId  String   @id @map("guide_id")
  domainId String   @map("domain_id")
  name     String   @map("name")
  teamIds  String[]
  roleIds  String[]

  domain   Domain                    @relation(fields: [domainId], references: [domainId])
  steps    OnboardingGuideStep[]
  progress OnboardingGuideProgress[]

  @@index(domainId)
  @@index(teamIds)
  @@index(roleIds)
  @@map("onboarding_guide")
}

model OnboardingGuideStep {
  stepId          String  @id @map("step_id")
  guideId         String  @map("guide_id")
  domainId        String  @map("domain_id")
  name            String  @map("name")
  type            String  @map("type")
  documentationId String?
  fileId          String?
  videoId         String?
  note            String?

  domain Domain          @relation(fields: [domainId], references: [domainId])
  guide  OnboardingGuide @relation(fields: [guideId], references: [guideId])

  @@index(domainId)
  @@index(guideId)
  @@map("onboarding_guide_step")
}

model OnboardingGuideProgress {
  guideId  String   @map("guide_id")
  domainId String   @map("domain_id")
  userId   String   @map("user_id")
  status   String   @map("status")
  seen     String[] @map("seen")

  guide  OnboardingGuide @relation(fields: [guideId], references: [guideId])
  domain Domain          @relation(fields: [domainId], references: [domainId])
  user   User            @relation(fields: [userId], references: [userId])
  person Person          @relation(fields: [domainId, userId], references: [domainId, userId])

  @@id([domainId, guideId, userId])
  @@index(domainId)
  @@index(userId)
  @@map("onboarding_progress")
}

model WorkArea {
  areaId   String @id @map("area_id")
  domainId String @map("domain_id")
  name     String @map("name")

  domain       Domain           @relation(fields: [domainId], references: [domainId])
  people       WorkAreaPerson[]
  items        WorkItem[]
  itemStatuses WorkItemStatus[]

  @@map("work_area")
}

model WorkAreaPerson {
  areaId   String @map("area_id")
  domainId String @map("domain_id")
  userId   String @map("user_id")

  area   WorkArea @relation(fields: [areaId], references: [areaId])
  domain Domain   @relation(fields: [domainId], references: [domainId])
  user   User     @relation(fields: [userId], references: [userId])
  person Person   @relation(fields: [domainId, userId], references: [domainId, userId])

  @@id([userId, areaId])
  @@map("work_area_person")
}

model WorkItemStatus {
  statusId     String  @id @map("status_id")
  areaId       String  @map("area_id")
  domainId     String  @map("domain_id")
  name         String  @map("name")
  isToDoStatus Boolean @map("is_todo_status")
  isDoneStatus Boolean @map("is_done_status")

  domain Domain     @relation(fields: [domainId], references: [domainId])
  area   WorkArea   @relation(fields: [areaId], references: [areaId])
  items  WorkItem[]

  @@map("work_area_status")
}

model WorkItem {
  itemId           String  @id @map("item_id")
  areaId           String  @map("area_id")
  domainId         String  @map("domain_id")
  name             String  @map("name")
  description      String  @map("description")
  reportedByUserId String  @map("reported_by_user_id")
  type             String  @map("type")
  statusId         String  @map("status_id")
  parentId         String? @map("parent_id")

  domain           Domain               @relation(fields: [domainId], references: [domainId])
  area             WorkArea             @relation(fields: [areaId], references: [areaId])
  status           WorkItemStatus       @relation(fields: [statusId], references: [statusId])
  reportedByUser   User                 @relation(fields: [reportedByUserId], references: [userId])
  reportedByPerson Person               @relation(fields: [reportedByUserId, domainId], references: [userId, domainId])
  parent           WorkItem?            @relation("children", fields: [parentId], references: [itemId])
  children         WorkItem[]           @relation("children")
  assignees        WorkItemAssigne[]
  attachments      WorkItemAttachment[]

  @@map("work_item")
}

model WorkItemAssigne {
  userId   String @map("user_id")
  itemId   String @map("item_id")
  domainId String @map("domain_id")

  domain Domain   @relation(fields: [domainId], references: [domainId])
  user   User     @relation(fields: [userId], references: [userId])
  person Person   @relation(fields: [domainId, userId], references: [domainId, userId])
  item   WorkItem @relation(fields: [itemId], references: [itemId])

  @@id([userId, itemId])
  @@map("work_item_assigne")
}

model WorkItemAttachment {
  itemId   String @map("item_id")
  fileId   String @map("file_id")
  domainId String @map("domain_id")

  domain Domain   @relation(fields: [domainId], references: [domainId])
  item   WorkItem @relation(fields: [itemId], references: [itemId])
  file   File     @relation(fields: [fileId], references: [fileId])

  @@id([itemId, fileId])
  @@map("work_item_attachment")
}

model File {
  fileId      String   @id @map("file_id")
  domainId    String   @map("domain_id")
  name        String   @map("name")
  type        String   @map("type")
  bucket      String   @map("bucket")
  key         String   @map("key")
  isUploaded  Boolean  @default(false) @map("is_uploaded")
  createdDate DateTime @default(now()) @map("created_date")

  domain             Domain               @relation(fields: [domainId], references: [domainId])
  documentationFiles DocumentationFile[]
  itemAttachments    WorkItemAttachment[]

  @@map("file")
}

model Label {
  labelId  String @id @map("label_id")
  domainId String @map("domain_id")

  name String @map("name")
  type String @map("type")

  domain          Domain           @relation(fields: [domainId], references: [domainId])
  componentLabels ComponentLabel[]
  teamLabels      TeamLabel[]

  @@unique([type, name])
  @@map("label")
}
